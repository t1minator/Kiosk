{"version":3,"sources":["locations/locations_common.js","locations/locations_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,e;;AAEA,yD;AACA,2B;AACA,qC;AACA,qC;AACA,oC;AACA,G;;AAEA,2B;AACA,Q;AACA,gB;AACA,e;AACA,e;AACA,gB;AACA,W;AACA,mB;AACA,a;AACA,wC;AACA,G;AACA,G;AACA,W;AACA,mB;AACA,c;AACA,G;AACA,iB;AACA,e;AACA,W;AACA,a;AACA,gB;AACA,gC;AACA,G;AACA,G;AACA,iB;AACA,e;AACA,W;AACA,iB;AACA,a;AACA,gB;AACA,gC;AACA,G;AACA,G;AACA,kB;AACA,e;AACA,W;AACA,a;AACA,gB;AACA,sB;AACA,G;AACA,G;AACA,mB;AACA,e;AACA,sU;AACA,a;AACA,gB;AACA,qB;AACA,G;AACA,G;AACA,iB;AACA,e;AACA,oC;AACA,a;AACA,gB;AACA,qB;AACA,G;AACA,G;AACA,W;AACA,+B;AACA,c;AACA,G;AACA,kB;AACA,yB;AACA,e;AACA,W;AACA,a;AACA,8B;AACA,G;AACA,G;AACA,oB;AACA,iC;AACA,e;AACA,U;AACA,a;AACA,8B;AACA,G;AACA,G;AACA,iB;AACA,uB;AACA,e;AACA,oB;AACA,a;AACA,4B;AACA,G;AACA,G;AACA,S;AACA,c;AACA,G;AACA,kB;AACA,gB;AACA,qB;AACA,a;AACA,qB;AACA,G;AACA,E;AACA,E;;AAEA,6D;;;;;;;;;;;;;;;;;;;AC1GA,+B;AACA,iD;AACA,uD;;AAEA,6E;AACA,yF;AACA,+B;;AAEA,6B;AACA,a;AACA,a;AACA,W;AACA,yB;AACA,uB;AACA,oB;AACA,8B;AACA,sC;AACA,W;AACA,iB;AACA,I;AACA,G;AACA,G;AACA,c;AACA,a;AACA,yB;AACA,wC;AACA,oB;AACA,8B;AACA,sC;AACA,W;AACA,iB;AACA,I;AACA,G;AACA,G;AACA,kB;AACA,e;AACA,e;AACA,a;AACA,G;AACA,kB;AACA,e;AACA,e;AACA,W;AACA,a;AACA,G;AACA,kB;AACA,e;AACA,e;AACA,G;AACA,gB;AACA,e;AACA,a;AACA,G;AACA,qB;AACA,c;AACA,G;AACA,wB;AACA,e;AACA,a;AACA,E;AACA,E;;AAEA,6D;;AAEA,iE;;AAEA,sD;;AAEA,wC;AACA,kB;AACA,sC;AACA,G;;AAEA,yC;AACA,kC;AACA,0B;AACA,S;AACA,uC;AACA,gF;AACA,G;AACA,yB;AACA,E;AACA,e;AACA,E;;AAEA,oC;AACA,kC;AACA,+B;AACA,E;;AAEA,sD;AACA,kC;AACA,qD;AACA,e;AACA,E;AACA,a;AACA,E;;AAEA,gB;AACA,qC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,oC;AACA,qC;AACA,e;AACA,+B;AACA,G;AACA,oC;AACA,oC;AACA,+B;AACA,8C;AACA,sD;AACA,8D;AACA,oD;AACA,mD;AACA,8B;AACA,a;AACA,I;AACA,wD;AACA,O;AACA,0D;AACA,e;AACA,iC;AACA,6B;AACA,gD;AACA,I;AACA,G;AACA,oB;AACA,G;AACA,iD;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,8B;AACA,0D;AACA,6C;AACA,4C;AACA,+C;AACA,O;AACA,e;AACA,kB;AACA,+B;AACA,G;AACA,qF;AACA,8D;AACA,8B;AACA,G;AACA,oE;AACA,G;AACA,qC;AACA,gC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,8B;AACA,e;AACA,+B;AACA,G;AACA,2D;AACA,U;AACA,uD;AACA,I;AACA,K;AACA,G;AACA,kC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,8B;AACA,e;AACA,+B;AACA,G;AACA,+B;AACA,iE;AACA,2D;AACA,U;AACA,8C;AACA,I;AACA,K;AACA,8B;AACA,sB;AACA,G;AACA,uC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,8B;AACA,e;AACA,+B;AACA,G;AACA,kD;AACA,U;AACA,wB;AACA,I;AACA,K;AACA,G;AACA,yC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,8B;AACA,e;AACA,+B;AACA,G;AACA,kD;AACA,U;AACA,yB;AACA,I;AACA,K;AACA,E;AACA,G;;AAEA,c;AACA,Y;AACA,e;AACA,e;AACA,sB;AACA,sB;AACA,sB;AACA,mB;AACA,E;;AAEA,sC;AACA,Q;AACA,e;AACA,yB;AACA,iB;AACA,E;AACA,G;;AAEA,wC;AACA,Q;AACA,a;AACA,yB;AACA,sC;AACA,G;AACA,G;AACA,S;AACA,a;AACA,yB;AACA,wC;AACA,oB;AACA,wD;AACA,6B;AACA,sB;AACA,kC;AACA,gC;AACA,oC;AACA,W;AACA,iB;AACA,I;AACA,G;AACA,G;AACA,O;AACA,a;AACA,yB;AACA,wC;AACA,oB;AACA,wD;AACA,6B;AACA,sB;AACA,kC;AACA,gC;AACA,2D;AACA,qC;AACA,W;AACA,iB;AACA,I;AACA,G;AACA,E;AACA,G;;AAEA,uC;AACA,Y;AACA,e;AACA,G;AACA,iB;AACA,e;AACA,8B;AACA,G;AACA,S;AACA,Y;AACA,G;AACA,O;AACA,a;AACA,E;AACA,G;;AAEA,+C;AACA,sD;AACA,Y;AACA,E;AACA,uC;AACA,W;AACA,a;AACA,G;AACA,I;AACA,G;;AAEA,2D;AACA,iB;AACA,sD;AACA,Y;AACA,E;AACA,M;AACA,gC;AACA,4B;AACA,iC;AACA,6B;AACA,uC;AACA,c;AACA,Y;AACA,E;AACA,qB;;AAEA,gJ;AACA,yB;AACA,uB;AACA,6C;AACA,W;AACA,c;AACA,iB;AACA,wB;AACA,yB;AACA,I;AACA,a;AACA,c;AACA,oB;AACA,+B;AACA,yB;AACA,yF;AACA,mC;AACA,qL;AACA,yK;AACA,yK;AACA,sK;AACA,uC;AACA,I;AACA,iC;AACA,yC;AACA,I;AACA,yB;AACA,sC;AACA,oC;AACA,oC;AACA,mC;AACA,iC;AACA,G;AACA,I;;AAEA,c;AACA,yB;AACA,8B;AACA,qC;AACA,wB;AACA,sB;AACA,sB;AACA,qB;AACA,K;AACA,gB;AACA,I;AACA,G;;AAEA,6C;AACA,iB;AACA,sD;AACA,Y;AACA,E;AACA,M;AACA,+B;AACA,gC;AACA,c;AACA,Y;AACA,E;AACA,sB;AACA,oE;AACA,gB;AACA,oB;AACA,+B;AACA,yG;AACA,mC;AACA,gL;AACA,oK;AACA,oK;AACA,iK;AACA,uC;AACA,I;AACA,iC;AACA,yC;AACA,I;AACA,yB;AACA,iC;AACA,+B;AACA,+B;AACA,8B;AACA,iC;AACA,G;AACA,I;;AAEA,c;AACA,yB;AACA,gC;AACA,8B;AACA,8B;AACA,6B;AACA,gB;AACA,I;AACA,G","file":"/packages/locations.js","sourcesContent":["Locations = {};\n\nLocations.collection = new Mongo.Collection('locations');\nLocations.collection.deny({\n\tinsert: function() { return true; },\n\tupdate: function() { return true; },\n\tremove: function() { return true; }\n});\n\nLocations._schemaObject = {\n\tname: {\n\t\tlabel: 'Name',\n\t\ttype: String,\n\t\tunique: true,\n\t\tindex: 'text',\n\t\tmax: 100,\n\t\tdenyUpdate: true,\n\t\tautoform: {\n\t\t\tplaceholder: 'A unique location name'\n\t\t}\n\t},\n\taddress: {\n\t\tlabel: 'Address',\n\t\ttype: Object\n\t},\n\t'address.one': {\n\t\ttype: String,\n\t\tmax: 100,\n\t\tautoform: {\n\t\t\tlabel: false,\n\t\t\tplaceholder: 'Address Line 1'\n\t\t}\n\t},\n\t'address.two': {\n\t\ttype: String,\n\t\tmax: 100,\n\t\toptional: true,\n\t\tautoform: {\n\t\t\tlabel: false,\n\t\t\tplaceholder: 'Address Line 2'\n\t\t}\n\t},\n\t'address.city': {\n\t\ttype: String,\n\t\tmax: 100,\n\t\tautoform: {\n\t\t\tlabel: false,\n\t\t\tplaceholder: 'City'\n\t\t}\n\t},\n\t'address.state': {\n\t\ttype: String,\n\t\tallowedValues: [ 'AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY' ],\n\t\tautoform: {\n\t\t\tlabel: false,\n\t\t\toptions: 'allowed'\n\t\t}\n\t},\n\t'address.zip': {\n\t\ttype: String,\n\t\tregEx: SimpleSchema.RegEx.ZipCode,\n\t\tautoform: {\n\t\t\tlabel: false,\n\t\t\tplaceholder: 'Zip'\n\t\t}\n\t},\n\tcontact: {\n\t\tlabel: 'Contact Information',\n\t\ttype: Object\n\t},\n\t'contact.name': {\n\t\tlabel: 'Contact Name:',\n\t\ttype: String,\n\t\tmax: 100,\n\t\tautoform: {\n\t\t\tplaceholder: 'Contact Name'\n\t\t}\n\t},\n\t'contact.number': {\n\t\tlabel: 'Contact Phone Number:',\n\t\ttype: String,\n\t\tmax: 25,\n\t\tautoform: {\n\t\t\tplaceholder: 'Phone Number'\n\t\t}\n\t},\n\t'contact.fax': {\n\t\tlabel: 'Fax Number:',\n\t\ttype: String,\n\t\tregEx: /^\\d{11}$/,\n\t\tautoform: {\n\t\t\tplaceholder: 'Fax Number'\n\t\t}\n\t},\n\tkiosk: {\n\t\ttype: Object\n\t},\n\t'kiosk.active': {\n\t\ttype: Boolean,\n\t\tdefaultValue: true,\n\t\tautoform: {\n\t\t\tdefaultValue: true\n\t\t}\n\t}\n};\n\nLocations.schema = new SimpleSchema(Locations._schemaObject);\n","//var bcrypt = NpmModuleBcrypt;\n//var bcryptHash = Meteor.wrapAsync(bcrypt.hash);\n//var bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\nvar Uuid = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\nvar secret = /^[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\-_]{43}$/;\nvar code = code = /^[0-9]{6}$/;\n\nLocations._schemaObjectDB = {\n\tcreatedAt: {\n\t\ttype: Date,\n\t\tindex: 1,\n\t\tautoValue: function() {\n\t\t\tif (this.isInsert) {\n\t\t\t\treturn new Date;\n\t\t\t} else if (this.isUpsert) {\n\t\t\t\treturn { $setOnInsert: new Date };\n\t\t\t} else {\n\t\t\t\tthis.unset();\n\t\t\t}\n\t\t}\n\t},\n\tmodifiedAt: {\n\t\ttype: Date,\n\t\tautoValue: function() {\n\t\t\tif (this.isInsert || this.isUpdate) {\n\t\t\t\treturn new Date;\n\t\t\t} else if (this.isUpsert) {\n\t\t\t\treturn { $setOnInsert: new Date };\n\t\t\t} else {\n\t\t\t\tthis.unset();\n\t\t\t}\n\t\t}\n\t},\n\t'kiosk.handle': {\n\t\ttype: String,\n\t\tunique: true,\n\t\tregEx: Uuid\n\t},\n\t'kiosk.apiKey': {\n\t\ttype: String,\n\t\tunique: true,\n\t\tindex: 1,\n\t\tregEx: Uuid\n\t},\n\t'kiosk.secret': {\n\t\ttype: String,\n\t\tregEx: secret\n\t},\n\t'kiosk.code': {\n\t\ttype: String,\n\t\tregEx: code\n\t},\n\t'kiosk.trueVault': {\n\t\ttype: Object\n\t},\n\t'kiosk.trueVault.id': {\n\t\ttype: String,\n\t\tregEx: Uuid\n\t}\n};\n\n_.extend(Locations._schemaObjectDB, Locations._schemaObject);\n\nLocations.schemaDB = new SimpleSchema(Locations._schemaObjectDB);\n\nLocations.collection.attachSchema(Locations.schemaDB);\n\nvar validId = Match.Where(function (x) {\n\tcheck(x, String);\n\treturn SimpleSchema.RegEx.Id.test(x);\n});\n\nvar getSecretString = function (secret) {\n\tif (typeof secret === 'string') {\n\t\tsecret = SHA256(secret);\n\t} else {\n\t\tif (secret.algorithm !== 'sha-256') {\n\t\t\tthrow new Error('Invalid secret hash algorithm. Only \"sha-256\" is allowed.');\n\t\t}\n\t\tsecret = secret.digest;\n\t}\n\treturn secret;\n};\n\nvar hashSecret = function (secret) {\n\tsecret = getSecretString(secret);\n\treturn bcryptHash(secret, 10);\n};\n\nLocations._checkSecret = function (location, secret) {\n\tsecret = getSecretString(secret);\n\tif (!bcryptCompare(secret, location.kiosk.secret)) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\nMeteor.methods({\n\tcreateLocation: function(location) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tLocations.schema.clean(location);\n\t\t\tcheck(location, Locations.schema);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tlocation.kiosk.handle = UUID.v4();\n\t\tlocation.kiosk.apiKey = UUID.v4();\n\t\tvar secret = Random.secret();\n\t\t// TODO: switch to OTP -> JWT authentication\n\t\tlocation.kiosk.secret = secret;//hashSecret(secret);\n\t\tlocation.kiosk.code = Random._randomString(6, '0123456789');\n\t\t// TODO: Remove password from TrueVault.createUser\n\t\tvar result = TrueVault.createUser(location.name);\n\t\tlocation.kiosk.trueVault = {\n\t\t\tid: result\n\t\t};\n\t\tTrueVault.updateGroup(TrueVault.groups.KIOSK, result);\n\t\ttry {\n\t\t\tvar locationId = Locations.collection.insert(location);\n\t\t} catch (e) {\n\t\t\tif (e.name === 'MongoError') {\n\t\t\t\tif (/E11000/.test(e.err))\n\t\t\t\t\tthrow new Meteor.Error('location-exists');\t\n\t\t\t}\n\t\t}\n\t\treturn locationId;\n\t},\n\tupdateLocation: function(modifier, locationId) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(locationId, validId);\n\t\t\tLocations.schema.clean(modifier, { isModifier: true });\n\t\t\tcheck(modifier, Match.Where(function (x) {\n\t\t\t\tvar ctx = Locations.schema.newContext();\n\t\t\t\treturn ctx.validate(x, { modifier: true });\n\t\t\t}));\n\t\t} catch (e) {\n\t\t\tconsole.log(e);\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tif (modifier.$set && modifier.$set.kiosk && _.has(modifier.$set.kiosk, 'active')) {\n\t\t\tmodifier.$set['kiosk.active'] = modifier.$set.kiosk.active;\n\t\t\tdelete modifier.$set.kiosk;\n\t\t}\n\t\treturn !!Locations.collection.update({_id: locationId}, modifier);\n\t},\n\t//flipActive: function(locationId) {\n\tnewCode: function(locationId) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(locationId, validId);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\treturn !!Locations.collection.update({_id: locationId}, {\n\t\t\t$set: {\n\t\t\t\t'kiosk.code': Random._randomString(6, '0123456789')\n\t\t\t}\n\t\t});\n\t},\n\tnewSecret: function(locationId) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(locationId, validId);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tvar secret = Random.secret();\n\t\t//var result = Locations.collection.update({_id: locationId}, {\n\t\treturn !!Locations.collection.update({_id: locationId}, {\n\t\t\t$set: {\n\t\t\t\t'kiosk.secret': secret//hashSecret(secret)\n\t\t\t}\n\t\t});\n\t\t//if (result) return secret;\n\t\t//else return false;\n\t},\n\tsetKioskActive: function(locationId) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(locationId, validId);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tLocations.collection.update({_id: locationId}, {\n\t\t\t$set: {\n\t\t\t\t'kiosk.active': true\n\t\t\t}\n\t\t});\n\t},\n\tsetKioskInactive: function(locationId) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(locationId, validId);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tLocations.collection.update({_id: locationId}, {\n\t\t\t$set: {\n\t\t\t\t'kiosk.active': false\n\t\t\t}\n\t\t});\n\t}\n});\n\nvar fields = {\n\tname: true,\n\taddress: true,\n\tcontact: true,\n\t'kiosk.active': true,\n\t'kiosk.apiKey': true,\n\t'kiosk.secret': true,\n\t'kiosk.code': true\n};\n\nvar locationsSort = new SimpleSchema({\n\tname: {\n\t\ttype: Number,\n\t\tallowedValues: [1, -1],\n\t\tdefaultValue: 1\n\t}\n});\n\nvar locationsFilter = new SimpleSchema({\n\tdate: {\n\t\ttype: Date,\n\t\tautoValue: function() {\n\t\t\tif (!this.isSet) return new Date();\n\t\t}\n\t},\n\tstart: {\n\t\ttype: Date,\n\t\tautoValue: function() {\n\t\t\tvar date = this.siblingField('date');\n\t\t\tif (date.isSet) {\n\t\t\t\t//if (_.isFunction(date.value)) date = date.value();\n\t\t\t\t//else date = date.value;\n\t\t\t\tdate = date.value;\n\t\t\t\tvar year = date.getFullYear();\n\t\t\t\tvar month = date.getMonth();\n\t\t\t\treturn new Date(year, month, 1);\n\t\t\t} else {\n\t\t\t\tthis.unset();\n\t\t\t}\n\t\t}\n\t},\n\tend: {\n\t\ttype: Date,\n\t\tautoValue: function() {\n\t\t\tvar date = this.siblingField('date');\n\t\t\tif (date.isSet) {\n\t\t\t\t//if (_.isFunction(date.value)) date = date.value();\n\t\t\t\t//else date = date.value;\n\t\t\t\tdate = date.value;\n\t\t\t\tvar year = date.getFullYear();\n\t\t\t\tvar month = date.getMonth();\n\t\t\t\t//return new Date(year, month + 1, 0, 23, 59, 59, 999);\n\t\t\t\treturn new Date(year, month + 1);\n\t\t\t} else {\n\t\t\t\tthis.unset();\n\t\t\t}\n\t\t}\n\t}\n});\n\nvar locationFilter = new SimpleSchema({\n\tlocation: {\n\t\ttype: Object,\n\t},\n\t'location.id': {\n\t\ttype: String,\n\t\tregEx: SimpleSchema.RegEx.Id\n\t},\n\tstart: {\n\t\ttype: Date\n\t},\n\tend: {\n\t\ttype: Date,\n\t}\n});\n\nMeteor.publish('locations.filter', function() {\n\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\treturn [];\n\t}\n\treturn Locations.collection.find({}, {\n\t\tfields: {\n\t\t\tname: true\n\t\t}\n\t});\n});\n\nMeteor.publish('locations', function(filter, sort, limit) {\n\tvar self = this;\n\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\treturn [];\n\t}\n\ttry {\n\t\tlocationsFilter.clean(filter);\n\t\tlocationsSort.clean(sort);\n\t\tcheck(filter, locationsFilter);\n\t\tcheck(sort, locationsSort);\n\t\tcheck(limit, Match.Optional(Number));\n\t} catch (e) {\n\t\treturn [];\n\t}\n\tlimit = limit || 10;\n\n\tvar locationsCountHandle = Counts.publish(this, 'locationsCount', Locations.collection.find({}, { fields: { _id: true } }), { noReady: true });\n\tvar initializing = true;\n\tvar countHandles = {};\n\tvar handle = Locations.collection.find({}, {\n\t\tfields: {\n\t\t\tname: true,\n\t\t\taddress: true,\n\t\t\t'contact.name': true,\n\t\t\t'contact.number': true\n\t\t},\n\t\tsort: sort,\n\t\tlimit: limit\n\t}).observeChanges({\n\t\tadded: function(id, fields) {\n\t\t\tcountHandles[id] = {};\n\t\t\tvar query = { 'location.id': id, createdAt: { $gte: filter.start, $lt: filter.end } };\n\t\t\tvar options = { noReady: true };\n\t\t\tcountHandles[id].inprogress = Counts.publish(self, 'locations.'+id+'.inprogress', Sessions.collection.find(_.extend(query, {'complete.condition': { $exists: false }})), options);\n\t\t\tcountHandles[id].finished = Counts.publish(self, 'locations.'+id+'.finished', Sessions.collection.find(_.extend(query, {'complete.condition': 'finished'})), options);\n\t\t\tcountHandles[id].inactive = Counts.publish(self, 'locations.'+id+'.inactive', Sessions.collection.find(_.extend(query, {'complete.condition': 'inactive'})), options);\n\t\t\tcountHandles[id].timeout = Counts.publish(self, 'locations.'+id+'.timeout', Sessions.collection.find(_.extend(query, {'complete.condition': 'timeout'})), options);\n\t\t\tself.added('locations', id, fields);\n\t\t},\n\t\tchanged: function(id, fields) {\n\t\t\tself.changed('locations', id, fields);\n\t\t},\n\t\tremoved: function(id) {\n\t\t\tcountHandles[id].inprogress.stop();\n\t\t\tcountHandles[id].finished.stop();\n\t\t\tcountHandles[id].inactive.stop();\n\t\t\tcountHandles[id].timeout.stop();\n\t\t\tself.removed('locations', id);\n\t\t}\n\t});\n\n\tself.ready();\n\tself.onStop(function() {\n\t\tlocationsCountHandle.stop();\n\t\t_.each(countHandles, function(id) {\n\t\t\tid.inprogress.stop();\n\t\t\tid.finished.stop();\n\t\t\tid.inactive.stop();\n\t\t\tid.timeout.stop();\n\t\t});\n\t\thandle.stop();\n\t});\n});\n\nMeteor.publish('location', function(filter) {\n\tvar self = this;\n\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\treturn [];\n\t}\n\ttry {\n\t\tlocationFilter.clean(filter);\n\t\tcheck(filter, locationFilter);\n\t} catch (e) {\n\t\treturn [];\n\t}\n\tvar countHandle = {};\n\tvar handle = Locations.collection.find({_id: filter.location.id}, {\n\t\tfields: fields\n\t}).observeChanges({\n\t\tadded: function(id, fields) {\n\t\t\tvar query = { 'location.id': filter.location.id, createdAt: { $gte: filter.start, $lte: filter.end }};\n\t\t\tvar options = { noReady: true };\n\t\t\tcountHandle.inprogress = Counts.publish(self, 'locations.'+id+'.inprogress', Sessions.collection.find(_.extend(query, {'complete.condition': { $exists: false }})), options);\n\t\t\tcountHandle.finished = Counts.publish(self, 'locations.'+id+'.finished', Sessions.collection.find(_.extend(query, {'complete.condition': 'finished'})), options);\n\t\t\tcountHandle.inactive = Counts.publish(self, 'locations.'+id+'.inactive', Sessions.collection.find(_.extend(query, {'complete.condition': 'inactive'})), options);\n\t\t\tcountHandle.timeout = Counts.publish(self, 'locations.'+id+'.timeout', Sessions.collection.find(_.extend(query, {'complete.condition': 'timeout'})), options);\n\t\t\tself.added('locations', id, fields);\n\t\t},\n\t\tchanged: function(id, fields) {\n\t\t\tself.changed('locations', id, fields);\n\t\t},\n\t\tremoved: function(id) {\n\t\t\tcountHandle.inprogress.stop();\n\t\t\tcountHandle.finished.stop();\n\t\t\tcountHandle.inactive.stop();\n\t\t\tcountHandle.timeout.stop();\n\t\t\tself.removed('locations', id);\n\t\t}\n\t});\n\n\tself.ready();\n\tself.onStop(function() {\n\t\tcountHandle.inprogress.stop();\n\t\tcountHandle.finished.stop();\n\t\tcountHandle.inactive.stop();\n\t\tcountHandle.timeout.stop();\n\t\thandle.stop();\n\t});\n});\n"]}