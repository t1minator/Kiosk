{"version":3,"sources":["reywood:publish-composite/lib/doc_ref_counter.js","reywood:publish-composite/lib/publication.js","reywood:publish-composite/lib/subscription.js","reywood:publish-composite/lib/publish_composite.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,yC;AACA,mB;AACA,6B;AACA,E;;AAEA,0E;AACA,qD;AACA,0B;AACA,2B;AACA,K;AACA,qB;AACA,E;;AAEA,0E;AACA,qD;AACA,yB;AACA,yB;;AAEA,sE;AACA,K;AACA,E;;;;;;;;;;;;;;;;;;;ACpBA,iE;AACA,qC;AACA,2B;AACA,2B;AACA,kD;AACA,qD;AACA,iD;AACA,E;;AAEA,oD;AACA,oC;;AAEA,iC;;AAEA,mD;AACA,oB;;AAEA,8C;AACA,oC;AACA,mE;;AAEA,mC;AACA,mH;AACA,6D;AACA,wE;AACA,+C;AACA,oB;AACA,gE;AACA,6D;AACA,6C;AACA,a;AACA,U;AACA,2C;AACA,6F;AACA,8C;AACA,U;AACA,wC;AACA,0F;AACA,qD;AACA,S;AACA,O;;AAEA,4D;AACA,+C;AACA,4F;AACA,kE;AACA,S;AACA,O;AACA,E;;AAEA,wD;AACA,iE;AACA,gC;AACA,kC;AACA,E;;AAEA,0D;AACA,gC;;AAEA,2C;;AAEA,6D;AACA,mB;;AAEA,yE;AACA,8B;AACA,E;;AAEA,0D;AACA,2E;AACA,E;;AAEA,0E;AACA,oF;AACA,E;;AAEA,6E;AACA,2E;AACA,yF;AACA,qD;AACA,sB;AACA,a;AACA,E;;AAEA,iF;AACA,oE;AACA,kC;AACA,iC;AACA,O;AACA,E;;AAEA,kF;AACA,mD;AACA,uD;AACA,a;AACA,E;;AAEA,8E;AACA,0E;;AAEA,6B;AACA,kC;AACA,kC;AACA,K;;AAEA,oC;AACA,yC;AACA,yC;AACA,K;AACA,E;;AAEA,0E;AACA,mD;AACA,wC;AACA,2D;AACA,S;AACA,a;AACA,E;;AAEA,+E;AACA,qD;AACA,qC;AACA,qC;AACA,E;;AAEA,mF;AACA,wH;;AAEA,kE;AACA,gC;AACA,O;AACA,E;;;AAGA,wC;AACA,wB;AACA,E;;AAEA,2E;AACA,8B;;AAEA,+B;AACA,2E;AACA,K;AACA,E;;AAEA,wF;AACA,iC;;AAEA,8B;AACA,kC;;AAEA,qC;AACA,yD;AACA,K;;AAEA,iD;AACA,E;;AAEA,2D;AACA,8B;AACA,+B;AACA,E;;AAEA,iE;AACA,8B;AACA,+B;AACA,E;;AAEA,2D;AACA,6B;AACA,E;;AAEA,yF;AACA,4D;AACA,iC;AACA,wB;AACA,E;;AAEA,uF;AACA,8B;;AAEA,c;AACA,mC;AACA,K;AACA,E;;AAEA,4D;AACA,oB;;AAEA,qC;AACA,+B;AACA,O;;AAEA,kB;AACA,E;;AAEA,qF;AACA,8B;;AAEA,c;AACA,+B;AACA,K;AACA,E;;AAEA,kF;AACA,0C;AACA,6B;AACA,O;AACA,E;;;AAGA,yD;AACA,yC;AACA,uB;AACA,gC;AACA,sC;AACA,E;;AAEA,kF;AACA,kD;AACA,E;;AAEA,4E;AACA,6D;AACA,4C;AACA,K;AACA,E;;AAEA,kF;AACA,qC;AACA,E;;AAEA,4E;AACA,sC;AACA,E;;AAEA,wE;AACA,qC;AACA,E;;;;;;;;;;;;;;;;;;;AC/OA,oC;AACA,oB;AACA,+B;AACA,sB;AACA,8C;AACA,6D;AACA,kH;AACA,gC;AACA,yD;AACA,2D;AACA,a;AACA,S;AACA,O;AACA,E;;AAEA,8D;AACA,uD;;AAEA,4D;AACA,uE;AACA,2D;AACA,8C;AACA,K;AACA,E;;AAEA,wE;AACA,+D;AACA,oE;AACA,4D;AACA,yD;AACA,K;AACA,E;;AAEA,+D;AACA,0E;AACA,kD;AACA,E;;AAEA,oE;AACA,oE;AACA,E;;AAEA,+E;AACA,qD;AACA,8C;AACA,uD;AACA,E;;AAEA,mF;AACA,sD;AACA,yD;AACA,E;;AAEA,uE;AACA,qD;AACA,+B;AACA,E;;AAEA,2E;AACA,2E;;AAEA,sC;;AAEA,wB;AACA,0E;AACA,wB;AACA,S;AACA,K;;AAEA,iB;AACA,E;;AAEA,sE;AACA,qD;AACA,6B;AACA,E;;AAEA,qE;AACA,gD;AACA,E;;;;;;;;;;;;;;;;;;;AC/EA,mD;AACA,4C;AACA,kD;AACA,sC;AACA,0D;;AAEA,oD;AACA,gE;AACA,S;;AAEA,iE;AACA,sB;;AAEA,gC;AACA,4B;AACA,W;;AAEA,qB;AACA,O;AACA,E;;AAEA,0B;;AAEA,yD;AACA,0C;AACA,qD;AACA,mD;AACA,M;AACA,E","file":"/packages/reywood_publish-composite.js","sourcesContent":["DocumentRefCounter = function(observer) {\n    this.heap = {};\n    this.observer = observer;\n};\n\nDocumentRefCounter.prototype.increment = function(collectionName, docId) {\n    var key = collectionName + \":\" + docId.valueOf();\n    if (!this.heap[key]) {\n        this.heap[key] = 0;\n    }\n    this.heap[key]++;\n};\n\nDocumentRefCounter.prototype.decrement = function(collectionName, docId) {\n    var key = collectionName + \":\" + docId.valueOf();\n    if (this.heap[key]) {\n        this.heap[key]--;\n\n        this.observer.onChange(collectionName, docId, this.heap[key]);\n    }\n};\n","Publication = function Publication(subscription, options, args) {\n    this.subscription = subscription;\n    this.options = options;\n    this.args = args || [];\n    this.childrenOptions = options.children || [];\n    this.publishedDocs = new PublishedDocumentList();\n    this.collectionName = options.collectionName;\n};\n\nPublication.prototype.publish = function publish() {\n    this.cursor = this._getCursor();\n\n    if (!this.cursor) { return; }\n\n    var collectionName = this._getCollectionName();\n    var self = this;\n\n    this.observeHandle = this.cursor.observe({\n        added: function added(doc) {\n            var alreadyPublished = self.publishedDocs.has(doc._id);\n\n            if (alreadyPublished) {\n                debugLog('Publication.observeHandle.added', collectionName + ':' + doc._id + ' already published');\n                self.publishedDocs.unflagForRemoval(doc._id);\n                self.subscription.changed(collectionName, doc._id, doc);\n                self._republishChildrenOf(doc);\n            } else {\n                self.publishedDocs.add(collectionName, doc._id);\n                self.subscription.added(collectionName, doc);\n                self._publishChildrenOf(doc);\n            }\n        },\n        changed: function changed(newDoc) {\n            debugLog('Publication.observeHandle.changed', collectionName + ':' + newDoc._id);\n            self._republishChildrenOf(newDoc);\n        },\n        removed: function removed(doc) {\n            debugLog('Publication.observeHandle.removed', collectionName + ':' + doc._id);\n            self._removeDoc(collectionName, doc._id);\n        }\n    });\n\n    this.observeChangesHandle = this.cursor.observeChanges({\n        changed: function changed(id, fields) {\n            debugLog('Publication.observeChangesHandle.changed', collectionName + ':' + id);\n            self.subscription.changed(collectionName, id, fields);\n        }\n    });\n};\n\nPublication.prototype.unpublish = function unpublish() {\n    debugLog('Publication.unpublish', this._getCollectionName());\n    this._stopObservingCursor();\n    this._unpublishAllDocuments();\n};\n\nPublication.prototype._republish = function _republish() {\n    this._stopObservingCursor();\n\n    this.publishedDocs.flagAllForRemoval();\n\n    debugLog('Publication._republish', 'run .publish again');\n    this.publish();\n\n    debugLog('Publication._republish', 'unpublish docs from old cursor');\n    this._removeFlaggedDocs();\n};\n\nPublication.prototype._getCursor = function _getCursor() {\n    return this.options.find.apply(this.subscription.meteorSub, this.args);\n};\n\nPublication.prototype._getCollectionName = function _getCollectionName() {\n    return this.collectionName || (this.cursor && this.cursor._getCollectionName());\n};\n\nPublication.prototype._publishChildrenOf = function _publishChildrenOf(doc) {\n    _.each(this.childrenOptions, function createChildPublication(options) {\n        var pub = new Publication(this.subscription, options, [ doc ].concat(this.args));\n        this.publishedDocs.addChildPub(doc._id, pub);\n        pub.publish();\n    }, this);\n};\n\nPublication.prototype._republishChildrenOf = function _republishChildrenOf(doc) {\n    this.publishedDocs.eachChildPub(doc._id, function(publication) {\n        publication.args[0] = doc;\n        publication._republish();\n    });\n};\n\nPublication.prototype._unpublishAllDocuments = function _unpublishAllDocuments() {\n    this.publishedDocs.eachDocument(function(doc) {\n        this._removeDoc(doc.collectionName, doc.docId);\n    }, this);\n};\n\nPublication.prototype._stopObservingCursor = function _stopObservingCursor() {\n    debugLog('Publication._stopObservingCursor', 'stop observing cursor');\n\n    if (this.observeHandle) {\n        this.observeHandle.stop();\n        delete this.observeHandle;\n    }\n\n    if (this.observeChangesHandle) {\n        this.observeChangesHandle.stop();\n        delete this.observeChangesHandle;\n    }\n};\n\nPublication.prototype._removeFlaggedDocs = function _removeFlaggedDocs() {\n    this.publishedDocs.eachDocument(function(doc) {\n        if (doc.isFlaggedForRemoval()) {\n            this._removeDoc(doc.collectionName, doc.docId);\n        }\n    }, this);\n};\n\nPublication.prototype._removeDoc = function _removeDoc(collectionName, docId) {\n    this.subscription.removed(collectionName, docId);\n    this._unpublishChildrenOf(docId);\n    this.publishedDocs.remove(docId);\n};\n\nPublication.prototype._unpublishChildrenOf = function _unpublishChildrenOf(docId) {\n    debugLog('Publication._unpublishChildrenOf', 'unpublishing children of ' + this._getCollectionName() + ':' + docId);\n\n    this.publishedDocs.eachChildPub(docId, function(publication) {\n        publication.unpublish();\n    });\n};\n\n\nvar PublishedDocumentList = function() {\n    this.documents = {};\n};\n\nPublishedDocumentList.prototype.add = function add(collectionName, docId) {\n    var key = docId.valueOf();\n\n    if (!this.documents[key]) {\n        this.documents[key] = new PublishedDocument(collectionName, docId);\n    }\n};\n\nPublishedDocumentList.prototype.addChildPub = function addChildPub(docId, publication) {\n    if (!publication) { return; }\n\n    var key = docId.valueOf();\n    var doc = this.documents[key];\n\n    if (typeof doc === 'undefined') {\n        throw new Error('Doc not found in list: ' + key);\n    }\n\n    this.documents[key].addChildPub(publication);\n};\n\nPublishedDocumentList.prototype.get = function get(docId) {\n    var key = docId.valueOf();\n    return this.documents[key];\n};\n\nPublishedDocumentList.prototype.remove = function remove(docId) {\n    var key = docId.valueOf();\n    delete this.documents[key];\n};\n\nPublishedDocumentList.prototype.has = function has(docId) {\n    return !!this.get(docId);\n};\n\nPublishedDocumentList.prototype.eachDocument = function eachDocument(callback, context) {\n    _.each(this.documents, function execCallbackOnDoc(doc) {\n        callback.call(this, doc);\n    }, context || this);\n};\n\nPublishedDocumentList.prototype.eachChildPub = function eachChildPub(docId, callback) {\n    var doc = this.get(docId);\n\n    if (doc) {\n        doc.eachChildPub(callback);\n    }\n};\n\nPublishedDocumentList.prototype.getIds = function getIds() {\n    var docIds = [];\n\n    this.eachDocument(function(doc) {\n        docIds.push(doc.docId);\n    });\n\n    return docIds;\n};\n\nPublishedDocumentList.prototype.unflagForRemoval = function unflagForRemoval(docId) {\n    var doc = this.get(docId);\n\n    if (doc) {\n        doc.unflagForRemoval();\n    }\n};\n\nPublishedDocumentList.prototype.flagAllForRemoval = function flagAllForRemoval() {\n    this.eachDocument(function flag(doc) {\n        doc.flagForRemoval();\n    });\n};\n\n\nvar PublishedDocument = function(collectionName, docId) {\n    this.collectionName = collectionName;\n    this.docId = docId;\n    this.childPublications = [];\n    this._isFlaggedForRemoval = false;\n};\n\nPublishedDocument.prototype.addChildPub = function addChildPub(childPublication) {\n    this.childPublications.push(childPublication);\n};\n\nPublishedDocument.prototype.eachChildPub = function eachChildPub(callback) {\n    for (var i = 0; i < this.childPublications.length; i++) {\n        callback(this.childPublications[i]);\n    }\n};\n\nPublishedDocument.prototype.isFlaggedForRemoval = function isFlaggedForRemoval() {\n    return this._isFlaggedForRemoval;\n};\n\nPublishedDocument.prototype.unflagForRemoval = function unflagForRemoval() {\n    this._isFlaggedForRemoval = false;\n};\n\nPublishedDocument.prototype.flagForRemoval = function flagForRemoval() {\n    this._isFlaggedForRemoval = true;\n};\n","Subscription = function(meteorSub) {\n    var self = this;\n    this.meteorSub = meteorSub;\n    this.docHash = {};\n    this.refCounter = new DocumentRefCounter({\n        onChange: function(collectionName, docId, refCount) {\n            debugLog(\"Subscription.refCounter.onChange\", collectionName + \":\" + docId.valueOf() + \" \" + refCount);\n            if (refCount <= 0) {\n                meteorSub.removed(collectionName, docId);\n                self._removeDocHash(collectionName, docId);\n            }\n        }\n    });\n};\n\nSubscription.prototype.added = function(collectionName, doc) {\n    this.refCounter.increment(collectionName, doc._id);\n\n    if (this._hasDocChanged(collectionName, doc._id, doc)) {\n        debugLog(\"Subscription.added\", collectionName + \":\" + doc._id);\n        this.meteorSub.added(collectionName, doc._id, doc);\n        this._addDocHash(collectionName, doc);\n    }\n};\n\nSubscription.prototype.changed = function(collectionName, id, changes) {\n    if (this._shouldSendChanges(collectionName, id, changes)) {\n        debugLog(\"Subscription.changed\", collectionName + \":\" + id);\n        this.meteorSub.changed(collectionName, id, changes);\n        this._updateDocHash(collectionName, id, changes);\n    }\n};\n\nSubscription.prototype.removed = function(collectionName, id) {\n    debugLog(\"Subscription.removed\", collectionName + \":\" + id.valueOf());\n    this.refCounter.decrement(collectionName, id);\n};\n\nSubscription.prototype._addDocHash = function(collectionName, doc) {\n    this.docHash[this._buildHashKey(collectionName, doc._id)] = doc;\n};\n\nSubscription.prototype._updateDocHash = function(collectionName, id, changes) {\n    var key = this._buildHashKey(collectionName, id);\n    var existingDoc = this.docHash[key] || {};\n    this.docHash[key] = _.extend(existingDoc, changes);\n};\n\nSubscription.prototype._shouldSendChanges = function(collectionName, id, changes) {\n    return this._isDocPublished(collectionName, id) &&\n        this._hasDocChanged(collectionName, id, changes);\n};\n\nSubscription.prototype._isDocPublished = function(collectionName, id) {\n    var key = this._buildHashKey(collectionName, id);\n    return !!this.docHash[key];\n};\n\nSubscription.prototype._hasDocChanged = function(collectionName, id, doc) {\n    var existingDoc = this.docHash[this._buildHashKey(collectionName, id)];\n\n    if (!existingDoc) { return true; }\n\n    for (var i in doc) {\n        if (doc.hasOwnProperty(i) && !_.isEqual(doc[i], existingDoc[i])) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nSubscription.prototype._removeDocHash = function(collectionName, id) {\n    var key = this._buildHashKey(collectionName, id);\n    delete this.docHash[key];\n};\n\nSubscription.prototype._buildHashKey = function(collectionName, id) {\n    return collectionName + \"::\" + id.valueOf();\n};\n","Meteor.publishComposite = function(name, options) {\n    return Meteor.publish(name, function() {\n        var subscription = new Subscription(this),\n            instanceOptions = options,\n            args = Array.prototype.slice.apply(arguments);\n\n        if (typeof instanceOptions === \"function\") {\n            instanceOptions = instanceOptions.apply(this, args);\n        }\n\n        var pub = new Publication(subscription, instanceOptions);\n        pub.publish();\n\n        this.onStop(function() {\n            pub.unpublish();\n        });\n\n        this.ready();\n    });\n};\n\ndebugLog = function() { };\n\nMeteor.publishComposite.enableDebugLogging = function() {\n    debugLog = function(source, message) {\n        while (source.length < 35) { source += \" \"; }\n        console.log(\"[\" + source + \"] \" + message);\n    };\n};\n"]}