{"version":3,"sources":["users/users_common.js","users/users_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,W;;AAEA,mB;AACA,qB;AACA,c;AACA,G;AACA,qB;AACA,c;AACA,G;AACA,qB;AACA,c;AACA,E;AACA,G;;AAEA,mB;AACA,qB;AACA,c;AACA,G;AACA,qB;AACA,c;AACA,G;AACA,qB;AACA,c;AACA,E;AACA,G;;AAEA,iB;AACA,6B;AACA,mC;AACA,yB;AACA,G;;AAEA,2C;AACA,S;AACA,e;AACA,4B;AACA,iC;AACA,G;AACA,gB;AACA,e;AACA,sC;AACA,sB;AACA,kD;AACA,2B;AACA,I;AACA,G;AACA,E;AACA,G;;AAEA,4C;AACA,Y;AACA,e;AACA,gC;AACA,a;AACA,gB;AACA,0B;AACA,G;AACA,E;AACA,G;;;;;;;;;;;;;;;;;;;AC1DA,mD;AACA,gF;;AAEA,gD;AACA,sD;AACA,E;;AAEA,8C;AACA,oD;AACA,E;;AAEA,gD;AACA,sD;AACA,E;;AAEA,2C;AACA,kB;AACA,kC;AACA,G;;AAEA,wC;AACA,kB;AACA,sC;AACA,G;;AAEA,8C;AACA,kB;AACA,uC;AACA,G;;AAEA,2C;AACA,kB;AACA,yC;AACA,G;;AAEA,0C;AACA,S;AACA,e;AACA,kC;AACA,G;AACA,Y;AACA,c;AACA,G;AACA,qB;AACA,c;AACA,G;AACA,wB;AACA,e;AACA,4B;AACA,E;AACA,G;;AAEA,+B;AACA,Y;AACA,e;AACA,gC;AACA,gB;AACA,G;AACA,U;AACA,iB;AACA,G;AACA,sB;AACA,e;AACA,iC;AACA,G;AACA,uB;AACA,e;AACA,G;AACA,a;AACA,Y;AACA,G;AACA,Y;AACA,e;AACA,iB;AACA,gB;AACA,G;AACA,S;AACA,iB;AACA,gB;AACA,G;AACA,U;AACA,e;AACA,G;AACA,iB;AACA,c;AACA,G;AACA,U;AACA,e;AACA,gB;AACA,G;AACA,mB;AACA,gB;AACA,gB;AACA,G;AACA,sB;AACA,e;AACA,gB;AACA,G;AACA,2B;AACA,a;AACA,gB;AACA,G;AACA,6B;AACA,e;AACA,gB;AACA,G;AACA,gC;AACA,e;AACA,gB;AACA,G;AACA,iB;AACA,gB;AACA,gB;AACA,G;AACA,yB;AACA,a;AACA,gB;AACA,E;AACA,G;;AAEA,kC;;AAEA,8C;AACA,iE;AACA,Y;AACA,E;AACA,8D;AACA,G;;AAEA,8C;AACA,iE;AACA,Y;AACA,E;AACA,iH;AACA,G;;AAEA,8C;AACA,M;AACA,yB;AACA,c;AACA,Y;AACA,E;AACA,iG;AACA,sE;AACA,Y;AACA,E;AACA,iH;AACA,G;;AAEA,kC;AACA,Y;AACA,e;AACA,yB;AACA,iB;AACA,E;AACA,G;;AAEA,+C;AACA,iB;AACA,sD;AACA,Y;AACA,E;AACA,M;AACA,wB;AACA,yB;AACA,uC;AACA,c;AACA,Y;AACA,E;AACA,qB;AACA,+B;AACA,W;AACA,kB;AACA,gB;AACA,gB;AACA,c;AACA,I;AACA,a;AACA,c;AACA,I;AACA,G;;AAEA,+C;AACA,uC;AACA,oB;AACA,wB;AACA,2D;AACA,iC;AACA,yD;AACA,0B;AACA,a;AACA,G;;AAEA,iD;AACA,8E;AACA,a;AACA,G;;AAEA,iD;AACA,2F;AACA,a;AACA,G;;AAEA,oC;AACA,sB;AACA,uB;AACA,K;AACA,S;AACA,mB;AACA,G;AACA,I;AACA,G;;AAEA,2C;AACA,mB;AACA,wC;AACA,wB;AACA,yB;AACA,O;AACA,W;AACA,qB;AACA,M;AACA,W;AACA,kB;AACA,K;AACA,M;AACA,U;AACA,wB;AACA,yB;AACA,O;AACA,W;AACA,qB;AACA,K;AACA,M;AACA,G;AACA,E;AACA,G;;AAEA,oC;AACA,yH;AACA,mC;AACA,0C;AACA,M;AACA,Y;AACA,oC;AACA,I;AACA,K;AACA,E;AACA,iD;AACA,+C;AACA,E;;AAEA,gB;AACA,oC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,0B;AACA,4B;AACA,e;AACA,+B;AACA,G;AACA,kD;AACA,Y;AACA,yB;AACA,e;AACA,I;AACA,K;AACA,a;AACA,6B;AACA,6B;AACA,sC;AACA,I;AACA,yC;AACA,qE;AACA,uD;AACA,sC;AACA,U;AACA,oB;AACA,I;AACA,K;AACA,G;AACA,gC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,0B;AACA,e;AACA,+B;AACA,G;AACA,uB;AACA,c;AACA,M;AACA,U;AACA,iB;AACA,I;AACA,K;AACA,G;AACA,iC;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,0B;AACA,e;AACA,+B;AACA,G;AACA,uB;AACA,c;AACA,M;AACA,U;AACA,gB;AACA,I;AACA,K;AACA,G;AACA,2D;AACA,8B;AACA,uD;AACA,+B;AACA,G;AACA,O;AACA,uC;AACA,wC;AACA,e;AACA,+B;AACA,G;AACA,uC;AACA,qB;AACA,K;AACA,0C;AACA,G;AACA,kC;AACA,qB;AACA,+B;AACA,G;AACA,O;AACA,kC;AACA,e;AACA,+B;AACA,G;AACA,O;AACA,wB;AACA,qB;AACA,e;AACA,mB;AACA,K;AACA,O;AACA,W;AACA,uB;AACA,K;AACA,M;AACA,e;AACA,iC;AACA,yE;AACA,4C;AACA,+C;AACA,I;AACA,G;AACA,G;AACA,6B;AACA,qB;AACA,+B;AACA,G;AACA,O;AACA,gC;AACA,iC;AACA,e;AACA,+B;AACA,G;AACA,sC;AACA,uB;AACA,mB;AACA,M;AACA,U;AACA,c;AACA,wB;AACA,mB;AACA,M;AACA,I;AACA,K;AACA,E;AACA,G;AACA,0B;AACA,qB;AACA,+B;AACA,G;AACA,mC;AACA,+B;AACA,G;AACA,O;AACA,W;AACA,c;AACA,e;AACA,+B;AACA,G;AACA,sC;AACA,uB;AACA,kB;AACA,M;AACA,e;AACA,a;AACA,0B;AACA,oB;AACA,K;AACA,I;AACA,K;AACA,wD;AACA,G;AACA,6B;AACA,qB;AACA,+B;AACA,G;AACA,mC;AACA,+B;AACA,G;AACA,O;AACA,W;AACA,c;AACA,e;AACA,+B;AACA,G;AACA,2B;AACA,+B;AACA,2G;AACA,a;AACA,sD;AACA,qD;AACA,yB;AACA,K;AACA,gB;AACA,+B;AACA,G;AACA,6C;AACA,+B;AACA,G;AACA,uB;AACA,kB;AACA,M;AACA,W;AACA,a;AACA,yB;AACA,K;AACA,I;AACA,K;AACA,E;AACA,G;AACA,G;;AAEA,gB;AACA,yC;AACA,6B;AACA,sC;AACA,G;AACA,kB;AACA,wB;AACA,sC;AACA,uB;AACA,gD;AACA,M;AACA,Y;AACA,mC;AACA,I;AACA,M;AACA,c;AACA,K;AACA,E;AACA,G;;AAEA,gB;AACA,6C;AACA,6B;AACA,sC;AACA,G;AACA,kB;AACA,wB;AACA,sC;AACA,2B;AACA,W;AACA,gE;AACA,I;AACA,M;AACA,c;AACA,K;AACA,E;AACA,G","file":"/packages/users.js","sourcesContent":["Users = {};\n\nMeteor.users.deny({\n\tinsert: function() {\n\t\treturn true;\n\t},\n\tupdate: function() {\n\t\treturn true;\n\t},\n\tremove: function() {\n\t\treturn true;\n\t}\n});\n\nMeteor.roles.deny({\n\tinsert: function() {\n\t\treturn true;\n\t},\n\tupdate: function() {\n\t\treturn true;\n\t},\n\tremove: function() {\n\t\treturn true;\n\t}\n});\n\nAccounts.config({\n\tsendVerificationEmail: true,\n\tforbidClientAccountCreation: true,\n\tloginExpirationInDays: 0\n});\n\nUsers.inviteUserSchema = new SimpleSchema({\n\temail: {\n\t\ttype: String,\n\t\tlabel: 'Invitation Email',\n\t\tregEx: SimpleSchema.RegEx.Email\n\t},\n\tconfirmEmail: {\n\t\ttype: String,\n\t\tlabel: 'Invitation Email (confirm)',\n\t\tcustom: function() {\n\t\t\tif (this.value !== this.field('email').value) {\n\t\t\t\treturn 'emailMismatch';\n\t\t\t}\n\t\t}\n\t}\n});\n\nUsers.setUsernameSchema = new SimpleSchema({\n\tusername: {\n\t\ttype: String,\n\t\tregEx: /^[a-z0-9A-Z_]{6,20}$/,\n\t\tautoform: {\n\t\t\tlabel: false,\n\t\t\tplaceholder: 'Username'\n\t\t}\n\t}\n});\n","Accounts.emailTemplates.siteName = \"Dentist is IN\";\nAccounts.emailTemplates.from = \"Dentist is IN Admin <no-reply@dentistisin.com>\";\n\nAccounts.urls.resetPassword = function (token) {\n\treturn Meteor.absoluteUrl('reset-password/' + token);\n};\n\nAccounts.urls.verifyEmail = function (token) {\n\treturn Meteor.absoluteUrl('verify-email/' + token);\n};\n\nAccounts.urls.enrollAccount = function (token) {\n\treturn Meteor.absoluteUrl('enroll-account/' + token);\n};\n\nvar validGroup = Match.Where(function (x) {\n\tcheck(x, String);\n\treturn /^ta|ma|dentist$/.test(x);\n});\n\nvar validId = Match.Where(function (x) {\n\tcheck(x, String);\n\treturn SimpleSchema.RegEx.Id.test(x);\n});\n\nvar validUsername = Match.Where(function (x) {\n\tcheck(x, String);\n\treturn /^[a-z0-9A-Z_]{6,20}$/.test(x);\n});\n\nvar validEmail = Match.Where(function (x) {\n\tcheck(x, String);\n\treturn SimpleSchema.RegEx.Email.test(x);\n});\n\nvar changeEmailSchema = new SimpleSchema({\n\temail: {\n\t\ttype: String,\n\t\tregEx: SimpleSchema.RegEx.Email,\n\t},\n\tpassword: {\n\t\ttype: Object\n\t},\n\t'password.digest': {\n\t\ttype: String\n\t},\n\t'password.algorithm': {\n\t\ttype: String,\n\t\tallowedValues: ['sha-256']\n\t}\n});\n\nvar schema = new SimpleSchema({\n\tusername: {\n\t\ttype: String,\n\t\tregEx: /^[a-z0-9A-Z_]{6,20}$/,\n\t\toptional: true\n\t},\n\temails: {\n\t\ttype: [Object],\n\t},\n\t'emails.$.address': {\n\t\ttype: String,\n\t\tregEx: SimpleSchema.RegEx.Email\n\t},\n\t'emails.$.verified': {\n\t\ttype: Boolean\n\t},\n\tcreatedAt: {\n\t\ttype: Date\n\t},\n\tservices: {\n\t\ttype: Object,\n\t\toptional: true,\n\t\tblackbox: true\n\t},\n\troles: {\n\t\ttype: [String],\n\t\toptional: true\n\t},\n\tactive: {\n\t\ttype: Boolean\n\t},\n\tloginFailures: {\n\t\ttype: Number\n\t},\n\tstatus: {\n\t\ttype: Object,\n\t\toptional: true\n\t},\n\t'status.online': {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\t'status.lastLogin': {\n\t\ttype: Object,\n\t\toptional: true\n\t},\n\t'status.lastLogin.date': {\n\t\ttype: Date,\n\t\toptional: true\n\t},\n\t'status.lastLogin.ipAddr': {\n\t\ttype: String,\n\t\toptional: true\n\t},\n\t'status.lastLogin.userAgent': {\n\t\ttype: String,\n\t\toptional: true\n\t},\n\t'status.idle': {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\t'status.lastActivity': {\n\t\ttype: Date,\n\t\toptional: true\n\t}\n});\n\nMeteor.users.attachSchema(schema);\n\nMeteor.publish('dentists.filter', function() {\n\tif (!Roles.userIsInRole(this.userId, ['dentist', 'ma', 'ta'])) {\n\t\treturn [];\n\t}\n\treturn Meteor.users.find({}, { fields: { username: true } });\n});\n\nMeteor.publish('dentists.online', function() {\n\tif (!Roles.userIsInRole(this.userId, ['dentist', 'ma', 'ta'])) {\n\t\treturn [];\n\t}\n\tCounts.publish(this, 'dentistsOnline', Meteor.users.find({ 'status.online': true }, { fields: { _id: true } }));\n});\n\nMeteor.publish('user.show', function(userId) {\n\ttry {\n\t\tcheck(userId, validId);\n\t} catch (e) {\n\t\treturn [];\n\t}\n\tvar user = Meteor.users.findOne({_id: this.userId}, { fields: { username: true, roles: true }});\n\tif (user._id !== userId && !Roles.userIsInRole(user, ['ma', 'ta'])) {\n\t\treturn [];\n\t}\n\treturn Meteor.users.find({_id: userId}, { fields: { username: true, emails: true, active: true, roles: true }});\n});\n\nvar usersSort = new SimpleSchema({\n\tusername: {\n\t\ttype: Number,\n\t\tallowedValues: [1, -1],\n\t\tdefaultValue: 1\n\t}\n});\n\nMeteor.publish('users', function(sort, limit) {\n\tvar self = this;\n\tif (!Roles.userIsInRole(this.userId, ['ta', 'ma'])) {\n\t\treturn [];\n\t}\n\ttry {\n\t\tusersSort.clean(sort);\n\t\tcheck(sort, usersSort);\n\t\tcheck(limit, Match.Optional(Number));\n\t} catch (e) {\n\t\treturn [];\n\t}\n\tlimit = limit || 10;\n\treturn Meteor.users.find({}, {\n\t\tfields: {\n\t\t\tusername: true,\n\t\t\temails: true,\n\t\t\tactive: true,\n\t\t\troles: true\n\t\t},\n\t\tsort: sort,\n\t\tlimit: limit\n\t});\n});\n\nAccounts.onCreateUser(function(options, user) {\n\tif (user.profile) delete user.profile;\n\tuser.active = true;\n\tuser.loginFailures = 0;\n\tvar userId = TrueVault.createUser(user.emails[0].address);\n\tuser.trueVault = { id: userId };\n\tTrueVault.updateGroup(TrueVault.groups.DENTIST, userId);\n\tuser.roles = ['dentist'];\n\treturn user;\n});\n\nAccounts.validateLoginAttempt(function(attempt) {\n\tif (attempt.user && !attempt.user.active) throw new Meteor.Error('disabled');\n\treturn true;\n});\n\nAccounts.validateLoginAttempt(function(attempt) {\n\tif (attempt.user && attempt.user.emails && !attempt.user.emails[0].verified) return false;\n\treturn true;\n});\n\nAccounts.onLogin(function(attempt) {\n\tMeteor.users.update({\n\t\t_id: attempt.user._id\n\t}, {\n\t\t$set: {\n\t\t\tloginFailures: 0\n\t\t}\n\t});\n});\n\nAccounts.onLoginFailure(function(attempt) {\n\tif(attempt.user) {\n\t\tif (attempt.user.loginFailures >= 4) {\n\t\t\tMeteor.users.update({\n\t\t\t\t_id: attempt.user._id\n\t\t\t}, {\n\t\t\t\t$inc: {\n\t\t\t\t\tloginFailures: 1\n\t\t\t\t},\n\t\t\t\t$set: {\n\t\t\t\t\tactive: false\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tMeteor.users.update({\n\t\t\t\t_id: attempt.user._id\n\t\t\t}, {\n\t\t\t\t$inc: {\n\t\t\t\t\tloginFailures: 1\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n});\n\nvar checkPwd = function(user, pwd) {\n\tif (_.isString(user) || (_.isObject(user) && (!user.services || !user.services.password || !user.services.password ))) {\n\t\tvar user = Meteor.users.findOne({\n\t\t\t_id: _.isString(user) ? user : user._id\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\t'services.password.bcrypt': true\n\t\t\t}\n\t\t});\n\t}\n\tvar result = Accounts._checkPassword(user, pwd);\n\tif (result.error) throw new Meteor.Error(403);\n};\n\nMeteor.methods({\n\tsetGroup: function(userId, group) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ma', 'ta'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(userId, validId);\n\t\t\tcheck(group, validGroup);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tvar user = Meteor.users.findOne({_id: userId}, {\n\t\t\tfields: {\n\t\t\t\t'trueVault.id': true,\n\t\t\t\troles: true\n\t\t\t}\n\t\t});\n\t\tvar map = {\n\t\t\t'ta': TrueVault.groups.TA,\n\t\t\t'ma': TrueVault.groups.MA,\n\t\t\t'dentist': TrueVault.groups.DENTIST\n\t\t};\n\t\tuser.roles = user.roles || ['dentist'];\n\t\tTrueVault.updateGroup(map[user.roles[0]], user.trueVault.id, true);\n\t\tTrueVault.updateGroup(map[group], user.trueVault.id);\n\t\tMeteor.users.update({_id: userId}, {\n\t\t\t$set: {\n\t\t\t\troles: [ group ]\n\t\t\t}\n\t\t});\n\t},\n\tdisableUser: function(userId) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ma', 'ta'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(userId, validId);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tMeteor.users.update({\n\t\t\t_id: userId\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tactive: false\n\t\t\t}\n\t\t});\n\t},\n\tactivateUser: function(userId) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ma', 'ta'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(userId, validId);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tMeteor.users.update({\n\t\t\t_id: userId\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tactive: true\n\t\t\t}\n\t\t});\n\t},\n\t// custom validation to ensure email doesn't already exist\n\tinviteUser: function(email) {\n\t\tif (!Roles.userIsInRole(this.userId, ['ma', 'ta'])) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tUsers.inviteUserSchema.clean(email);\n\t\t\tcheck(email, Users.inviteUserSchema);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tvar accountId = Accounts.createUser({\n\t\t\temail: email.email\n\t\t});\n\t\tAccounts.sendEnrollmentEmail(accountId);\n\t},\n\tsetUsername: function(username) {\n\t\tif (!this.userId) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tcheck(username, validUsername);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\ttry {\n\t\t\tMeteor.users.update({\n\t\t\t\t_id: this.userId,\n\t\t\t\tusername: {\n\t\t\t\t\t$exists: false\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\t$set: {\n\t\t\t\t\tusername: username\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tif (e.name === 'MongoError') {\n\t\t\t\tvar match = e.err.match(/E11000 duplicate key error index: ([^ ]+)/);\n\t\t\t\tif (match[1].indexOf('username') !== -1)\n\t\t\t\t\tthrow new Meteor.Error('username-exists');\n\t\t\t}\n\t\t}\n\t},\n\tupdateEmail: function(doc) {\n\t\tif (!this.userId) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\tchangeEmailSchema.clean(doc);\n\t\t\tcheck(doc, changeEmailSchema);\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tcheckPwd(this.userId, doc.password);\n\t\tMeteor.users.update({\n\t\t\t_id: this.userId\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\temails: [{\n\t\t\t\t\taddress: doc.email,\n\t\t\t\t\tverified: true\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n/**\n\taddEmail: function(obj) {\n\t\tif (!this.userId) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\tif (this.userId !== obj.userId) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\t// clean\n\t\t\t// validate\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tcheckPwd(this.userId, obj.password);\n\t\tMeteor.users.update({\n\t\t\t_id: obj.userId\n\t\t}, {\n\t\t\t$addToSet: {\n\t\t\t\temails: {\n\t\t\t\t\taddress: obj.address,\n\t\t\t\t\tverified: false\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tAccounts.sendVerificationEmail(obj.userId, obj.email);\n\t},\n\tremoveEmail: function(obj) {\n\t\tif (!this.userId) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\tif (this.userId !== obj.userId) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\ttry {\n\t\t\t// clean\n\t\t\t// validate\n\t\t} catch (e) {\n\t\t\tthrow new Meteor.Error(400);\n\t\t}\n\t\tvar user = Meteor.user();\n\t\tcheckPwd(user, obj.password);\n\t\t// In order to remove an e-mail it has to unverified or there must be another verified e-mail in the list\n\t\tvar target;\n\t\tvar emails = _.filter(user.emails, function(email) {\n\t\t\tif (email.address === obj.address) target = email;\n\t\t\treturn email.verified;\n\t\t});\n\t\tif (!target) {\n\t\t\tthrow new Meteor.Error(404);\n\t\t}\n\t\tif (target.verified && emails.length < 2) {\n\t\t\tthrow new Meteor.Error(403);\n\t\t}\n\t\tMeteor.users.update({\n\t\t\t_id: obj.userId\n\t\t}, {\n\t\t\t$pull: {\n\t\t\t\temails: {\n\t\t\t\t\taddress: obj.address\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n**/\n});\n\nSyncedCron.add({\n\tname: 'Password Reset Token Expiration',\n\tschedule: function(parser) {\n\t\treturn parser.text('every 1 hours');\n\t},\n\tjob: function() {\n\t\tvar date = new Date();\n\t\tdate.setHours(date.getHours() - 24);\n\t\tMeteor.users.update({\n\t\t\t'services.password.reset.when': { $lt: date }\n\t\t}, {\n\t\t\t$unset: {\n\t\t\t\t'services.password.reset': true\n\t\t\t}\n\t\t}, {\n\t\t\tmulti: true\n\t\t});\n\t}\n});\n\nSyncedCron.add({\n\tname: 'Email Verification Token Expiration',\n\tschedule: function(parser) {\n\t\treturn parser.text('every 1 hours');\n\t},\n\tjob: function() {\n\t\tvar date = new Date();\n\t\tdate.setHours(date.getHours() - 24);\n\t\tMeteor.users.update({}, {\n\t\t\t$pull: {\n\t\t\t\t'services.email.verificationTokens': { when: { $lt: date } }\n\t\t\t}\n\t\t}, {\n\t\t\tmulti: true\n\t\t});\n\t}\n});\n"]}