{"version":3,"sources":["kiosk-interface/kiosk_server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,W;;AAEA,gD;;AAEA,6E;;AAEA,kC;AACA,O;AACA,a;AACA,yB;AACA,mB;AACA,G;AACA,G;AACA,a;AACA,e;AACA,8B;AACA,G;AACA,e;AACA,e;AACA,a;AACA,G;AACA,W;AACA,e;AACA,U;AACA,E;AACA,G;;AAEA,mB;;AAEA,sC;AACA,W;AACA,e;AACA,8B;AACA,G;AACA,W;AACA,e;AACA,U;AACA,E;AACA,G;;AAEA,6C;AACA,Q;AACA,e;AACA,oB;AACA,S;AACA,G;AACA,Q;AACA,e;AACA,6B;AACA,E;AACA,G;;AAEA,0C;AACA,uB;AACA,qB;AACA,qB;AACA,O;AACA,c;AACA,G;AACA,uB;AACA,Q;AACA,c;AACA,E;AACA,G;;AAEA,iB;AACA,W;AACA,e;AACA,8B;AACA,E;AACA,E;;AAEA,sD;;AAEA,wD;AACA,U;AACA,oC;AACA,gB;AACA,E;AACA,e;;;AAGA,8C;AACA,oB;AACA,e;AACA,U;AACA,G;AACA,qB;AACA,e;AACA,W;AACA,gB;AACA,G;AACA,mB;AACA,e;AACA,U;AACA,G;AACA,wB;AACA,e;AACA,W;AACA,gB;AACA,G;AACA,qB;AACA,e;AACA,U;AACA,G;AACA,qB;AACA,e;AACA,W;AACA,gB;AACA,G;AACA,sB;AACA,e;AACA,U;AACA,G;AACA,uB;AACA,e;AACA,qU;AACA,G;AACA,qB;AACA,e;AACA,qB;AACA,G;AACA,iB;AACA,c;AACA,e;AACA,2E;AACA,G;AACA,iB;AACA,e;AACA,6B;AACA,G;AACA,uB;AACA,e;AACA,W;AACA,kC;AACA,gB;AACA,G;AACA,uB;AACA,e;AACA,S;AACA,U;AACA,gB;AACA,G;AACA,6B;AACA,e;AACA,oD;AACA,G;AACA,4B;AACA,gB;AACA,gB;AACA,G;AACA,6B;AACA,gB;AACA,gB;AACA,G;AACA,mC;AACA,gB;AACA,gB;AACA,G;AACA,2B;AACA,gB;AACA,gB;AACA,G;AACA,6B;AACA,gB;AACA,gB;AACA,G;AACA,0B;AACA,gB;AACA,gB;AACA,G;AACA,0B;AACA,gB;AACA,gB;AACA,G;AACA,gC;AACA,gB;AACA,gB;AACA,G;AACA,4B;AACA,gB;AACA,gB;AACA,G;AACA,6B;AACA,gB;AACA,gB;AACA,G;AACA,gC;AACA,gB;AACA,gB;AACA,G;AACA,8B;AACA,gB;AACA,gB;AACA,G;AACA,sB;AACA,e;AACA,Y;AACA,gB;AACA,G;AACA,2B;AACA,gB;AACA,gB;AACA,G;AACA,2B;AACA,gB;AACA,gB;AACA,G;AACA,8B;AACA,gB;AACA,gB;AACA,G;AACA,yB;AACA,gB;AACA,gB;AACA,G;AACA,yB;AACA,e;AACA,Y;AACA,gB;AACA,G;AACA,c;AACA,e;AACA,U;AACA,G;AACA,kB;AACA,e;AACA,U;AACA,G;AACA,kB;AACA,e;AACA,2B;AACA,G;AACA,kB;AACA,e;AACA,uB;AACA,E;AACA,G;;AAEA,sD;AACA,W;AACA,iC;AACA,E;AACA,e;;AAEA,6B;AACA,6B;;AAEA,yC;AACA,mB;AACA,+B;AACA,0B;AACA,iF;AACA,E;AACA,E;;AAEA,sD;;AAEA,oC;AACA,a;AACA,M;AACA,8B;AACA,sC;AACA,sC;AACA,8C;AACA,c;AACA,oD;AACA,E;;AAEA,oB;AACA,E;;AAEA,uD;;AAEA,yC;AACA,8C;AACA,sB;AACA,sB;AACA,wB;AACA,iB;AACA,8C;AACA,E;;AAEA,iB;AACA,E;;AAEA,sD;AACA,c;AACA,M;AACA,iF;AACA,c;AACA,8C;AACA,E;;AAEA,U;AACA,M;AACA,oC;AACA,c;AACA,oD;AACA,E;AACA,a;AACA,E;;AAEA,oE;AACA,uB;AACA,kC;AACA,qD;AACA,4C;AACA,iE;AACA,kB;AACA,gC;AACA,S;AACA,Y;AACA,E;AACA,8B;AACA,S;AACA,qB;AACA,Y;AACA,G;AACA,E;;AAEA,oD;AACA,sB;AACA,kC;AACA,a;AACA,M;AACA,+F;AACA,c;AACA,Y;AACA,E;AACA,kC;AACA,4B;AACA,sC;AACA,wD;AACA,e;AACA,K;AACA,W;AACA,a;AACA,qB;AACA,G;AACA,I;AACA,G;;AAEA,gB;AACA,6B;AACA,iB;AACA,uB;AACA,4B;AACA,6F;AACA,6C;AACA,6B;AACA,uC;AACA,yD;AACA,W;AACA,kB;AACA,mB;AACA,I;AACA,M;AACA,Y;AACA,a;AACA,I;AACA,K;;AAEA,iB;AACA,yC;AACA,G;;AAEA,qB;AACA,mC;AACA,8C;AACA,gC;AACA,K;AACA,G;AACA,G;AACA,8B;AACA,iB;AACA,uB;AACA,6B;AACA,kC;AACA,c;AACA,G;AACA,oC;AACA,kC;AACA,iB;AACA,uB;AACA,iC;AACA,mG;;AAEA,4C;AACA,6B;AACA,uC;AACA,wD;AACA,M;AACA,U;AACA,sB;AACA,oC;AACA,I;AACA,K;;AAEA,sB;AACA,yC;AACA,G;AACA,C;AACA,c;AACA,G;;AAEA,wB;AACA,uC;AACA,iB;AACA,uB;AACA,sC;AACA,oI;;AAEA,yD;AACA,sC;AACA,G;;AAEA,gD;AACA,qC;AACA,c;AACA,6B;AACA,gC;AACA,8C;AACA,K;AACA,2B;AACA,gB;AACA,K;AACA,G;;AAEA,uB;AACA,oC;AACA,iB;AACA,uB;AACA,mC;AACA,+H;AACA,6C;AACA,6B;AACA,uC;AACA,yD;AACA,gB;AACA,M;AACA,Y;AACA,c;AACA,mB;AACA,e;AACA,I;AACA,K;AACA,qD;AACA,gB;AACA,yC;AACA,G;;AAEA,+C;;AAEA,mG;;AAEA,2C;AACA,8C;AACA,K;;AAEA,+C;AACA,iE;AACA,0B;AACA,qD;AACA,U;AACA,kB;AACA,0B;AACA,4C;AACA,gD;AACA,+C;AACA,K;AACA,W;AACA,sC;AACA,I;AACA,K;AACA,sB;AACA,yC;AACA,G;AACA,c;AACA,G;;AAEA,oB;AACA,oC;AACA,iB;AACA,uB;AACA,mC;AACA,iG;AACA,6C;AACA,6B;AACA,uC;AACA,yD;AACA,gB;AACA,M;AACA,Y;AACA,a;AACA,I;AACA,K;;AAEA,gB;AACA,yC;AACA,G;AACA,8E;AACA,G;AACA,mC;AACA,iB;AACA,uB;AACA,kC;AACA,iG;AACA,4C;AACA,6B;AACA,uC;AACA,yD;AACA,gB;AACA,M;AACA,U;AACA,2B;AACA,K;AACA,W;AACA,uC;AACA,I;AACA,K;;AAEA,sB;AACA,yC;AACA,G;;AAEA,c;AACA,G;AACA,sC;AACA,iB;AACA,uB;AACA,qC;AACA,kG;AACA,4C;AACA,6B;AACA,uC;AACA,yD;AACA,iB;AACA,wB;AACA,M;AACA,U;AACA,2B;AACA,+B;AACA,K;AACA,W;AACA,uC;AACA,I;AACA,K;;AAEA,sB;AACA,yC;AACA,G;;AAEA,c;AACA,G;;AAEA,mD;AACA,iB;AACA,uB;AACA,+C;AACA,6F;AACA,6C;AACA,6B;AACA,uC;AACA,yD;AACA,W;AACA,kB;AACA,mB;AACA,I;AACA,M;AACA,Y;AACA,a;AACA,I;AACA,K;;AAEA,iB;AACA,yC;AACA,G;;AAEA,qB;AACA,mC;AACA,8C;AACA,gC;AACA,K;AACA,G;;AAEA,wC;AACA,iB;AACA,uB;AACA,uC;AACA,kG;AACA,4C;AACA,6B;AACA,uC;AACA,yD;AACA,iB;AACA,yB;AACA,M;AACA,U;AACA,0B;AACA,K;AACA,W;AACA,uC;AACA,I;AACA,K;;AAEA,sB;AACA,yC;AACA,G;;AAEA,c;AACA,G;;AAEA,qC;AACA,iB;AACA,uB;AACA,oC;AACA,mG;AACA,4C;AACA,6B;AACA,uC;AACA,yD;AACA,iB;AACA,2B;AACA,M;AACA,U;AACA,oB;AACA,wB;AACA,K;AACA,W;AACA,qC;AACA,I;AACA,K;;AAEA,sB;AACA,yC;AACA,G;;AAEA,c;AACA,G;;AAEA,sC;AACA,iB;AACA,uB;AACA,qC;AACA,sG;;AAEA,gB;AACA,U;AACA,sB;AACA,oC;AACA,I;AACA,I;;AAEA,2B;AACA,oD;AACA,U;AACA,wC;AACA,G;AACA,4C;AACA,6B;AACA,uC;AACA,yD;AACA,kB;AACA,a;;AAEA,sB;AACA,yC;AACA,G;;AAEA,c;AACA,E;AACA,G","file":"/packages/kiosk-interface.js","sourcesContent":["Kiosk = {};\n\nKiosk.logs = new Mongo.Collection('kiosk.logs');\n\nvar UUID = /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i;\n\nvar logSchema = new SimpleSchema({\n\tat: { \n\t\ttype: Date,\n\t\tautoValue: function() {\n\t\t\treturn new Date;\n\t\t}\n\t},\n\tsessionId: {\n\t\ttype: String,\n\t\tregEx: SimpleSchema.RegEx.Id\n\t},\n\tkioskHandle: {\n\t\ttype: String,\n\t\tregEx: UUID\n\t},\n\tmessage: {\n\t\ttype: String,\n\t\tmax: 150\n\t}\n});\n\nKiosk.schemas = {};\n\nKiosk.schemas.log = new SimpleSchema({\n\tsession: {\n\t\ttype: String,\n\t\tregEx: SimpleSchema.RegEx.Id\n\t},\n\tmessage: {\n\t\ttype: String,\n\t\tmax: 150\n\t}\n});\n\nKiosk.schemas.accessCode = new SimpleSchema({\n\tcode: {\n\t\ttype: String,\n\t\tregEx: /^[0-9]*$/,\n\t\tmax: 20\n\t},\n\tlang: {\n\t\ttype: String,\n\t\tallowedValues: ['en', 'es']\n\t}\n});\n\nKiosk.schemas.message = new SimpleSchema({\n\taud: { type: String },\n\texp: { type: Date },\n\tiat: { type: Date },\n\tiss: {\n\t\ttype: String\n\t},\n\tsub: { type: String },\n\tdata: {\n\t\ttype: String\n\t}\n});\n\nvar sessionId = {\n\tsession: {\n\t\ttype: String,\n\t\tregEx: SimpleSchema.RegEx.Id\n\t}\n};\n\nKiosk.schemas.sessionId = new SimpleSchema(sessionId);\n\nKiosk.schemas.createSurvey = new SimpleSchema(_.extend({\n\tsurvey: {\n\t\ttype: Sessions.schemas.surveyForm,\n\t\toptional: true\n\t}\n}, sessionId));\n\n\nKiosk.schemas.patientForm = new SimpleSchema({\n\tpatientNameFirst: {\n\t\ttype: String,\n\t\tmax: 100\n\t},\n\tpatientNameMiddle: {\n\t\ttype: String,\n\t\tmax: 100,\n\t\toptional: true\n\t},\n\tpatientNameLast: {\n\t\ttype: String,\n\t\tmax: 100\n\t},\n\tpatientNamePreferred: {\n\t\ttype: String,\n\t\tmax: 100,\n\t\toptional: true\n\t},\n\tpatientAddressOne: {\n\t\ttype: String,\n\t\tmax: 100\n\t},\n\tpatientAddressTwo: {\n\t\ttype: String,\n\t\tmax: 100,\n\t\toptional: true\n\t},\n\tpatientAddressCity: {\n\t\ttype: String,\n\t\tmax: 100\n\t},\n\tpatientAddressState: {\n\t\ttype: String,\n\t\tallowedValues: [ 'AK', 'AL', 'AR', 'AZ', 'CA', 'CO', 'CT', 'DC', 'DE', 'FL', 'GA', 'HI', 'IA', 'ID', 'IL', 'IN', 'KS', 'KY', 'LA', 'MA', 'MD', 'ME', 'MI', 'MN', 'MO', 'MS', 'MT', 'NC', 'ND', 'NE', 'NH', 'NJ', 'NM', 'NV', 'NY', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VA', 'VT', 'WA', 'WI', 'WV', 'WY' ]\n\t},\n\tpatientAddressZip: {\n\t\ttype: String,\n\t\tregEx: /^[0-9]{5}$/\n\t},\n\tpatientDobDob: {\n\t\t//type: Date\n\t\ttype: String,\n\t\tregEx: /^(0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$/\n\t},\n\tpatientSexSex: {\n\t\ttype: String,\n\t\tallowedValues: [ 'M', 'F' ]\n\t},\n\tpatientContactEmail: {\n\t\ttype: String,\n\t\tmax: 100,\n\t\tregEx: SimpleSchema.RegEx.Email,\n\t\toptional: true\n\t},\n\tpatientContactPhone: {\n\t\ttype: String,\n\t\tmin: 9,\n\t\tmax: 25,\n\t\toptional: true\n\t},\n\tpatientInsuranceInsurance: {\n\t\ttype: String,\n\t\tallowedValues: [ 'Insurance', 'Medicaid', 'Self' ]\n\t},\n\tmedicalConditionsHivAids: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsPregnant: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsContraceptives: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsCancer: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsDiabetes: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsHeart: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsBlood: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsKidneyLiver: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsStomach: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsBleeding: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsPsychiatric: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalConditionsRadiation: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalMedications: {\n\t\ttype: String,\n\t\tmax: 1000,\n\t\toptional: true\n\t},\n\tmedicalAllergiesAspirin: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalAllergiesCodeine: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalAllergiesPenicillin: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalAllergiesSulfa: {\n\t\ttype: Boolean,\n\t\toptional: true\n\t},\n\tmedicalAllergiesOther: {\n\t\ttype: String,\n\t\tmax: 1000,\n\t\toptional: true\n\t},\n\tdentalPain: {\n\t\ttype: String,\n\t\tmax: 250\n\t},\n\tdentalDuration: {\n\t\ttype: String,\n\t\tmax: 250\n\t},\n\tdentalSwelling: {\n\t\ttype: String,\n\t\tallowedValues: ['Y', 'N']\n\t},\n\tdentalSeverity: {\n\t\ttype: String,\n\t\tregEx: /^[1-9]$|^10$/\n\t}\n});\n\nKiosk.schemas.createForm = new SimpleSchema(_.extend({\n\tpatient: {\n\t\ttype: Kiosk.schemas.patientForm\n\t}\n}, sessionId));\n\n// TODO: Replace with address\nvar audience = 'DentistIsIn';\n\nvar checkSchema = function(obj, schema) {\n\tschema.clean(obj);\n\tvar ctx = schema.newContext();\n\tif (!ctx.validate(obj)) {\n\t\tthrow new Meteor.Error('bad-data', 'Error validating data', ctx.invalidKeys());\n\t}\n};\n\nvar badMessage = 'The received message was malformed';\n\nvar checkMessage = function(token) {\n\tvar decoded;\n\ttry {\n\t\tdecoded = JWT.decode(token);\n\t\tdecoded.iat = new Date(decoded.iat);\n\t\tdecoded.exp = new Date(decoded.exp);\n\t\tcheckSchema(decoded, Kiosk.schemas.message);\n\t} catch (e) {\n\t\tthrow new Meteor.Error('bad-message', badMessage);\n\t}\n\n\treturn decoded.iss;\n};\n\nvar badAuth = 'The provided credentials are not valid';\n\nvar getLocation = function(key, fields) {\n\tvar location = Locations.collection.findOne({\n\t\t'kiosk.apiKey': key,\n\t\t'kiosk.active': true\n\t}, { fields: fields });\n\tif (!location) {\n\t\tthrow new Meteor.Error('bad-auth', badAuth);\n\t}\n\n\treturn location;\n};\n\nvar verifyMessage = function(token, secret, subject) {\n\tvar verified;\n\ttry {\n\t\tverified = JWT.verify(token, secret, { audience: audience, subject: 'HS256' });\n\t} catch (e) {\n\t\tthrow new Meteor.Error('bad-auth', badAuth);\n\t}\n\n\tvar data;\n\ttry {\n\t\tdata = EJSON.parse(verified.data);\n\t} catch (e) {\n\t\tthrow new Meteor.Error('bad-message', badMessage);\n\t}\n\treturn data;\n};\n\nvar validateMessage = function(token, subject, dataSchema, fields) {\n\tfields = fields || {};\n\tvar issuer = checkMessage(token);\n\tfields = _.extend(fields, { 'kiosk.secret': true });\n\tvar location = getLocation(issuer, fields);\n\tvar data = verifyMessage(token, location.kiosk.secret, subject);\n\tif (dataSchema) {\n\t\tcheckSchema(data, dataSchema);\n\t} else {\n\t\tdata = {};\n\t}\n\tdelete location.kiosk.secret;\n\treturn {\n\t\tlocation: location,\n\t\tdata: data\n\t};\n};\n\nMeteor.publish('kiosk_voip_state', function(token) {\n\tcheck(token, String);\n\tvar subject = 'kiosk_voip_state';\n\tvar message;\n\ttry {\n\t\tmessage = validateMessage(token, subject, Kiosk.schemas.sessionId, { 'kiosk.handle': true });\n\t} catch (e) {\n\t\treturn [];\n\t}\n\treturn Sessions.collection.find({\n\t\t_id: message.data.session,\n\t\t'location.id': message.location._id,\n\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\tstate: 'voip'\n\t}, {\n\t\tfields: {\n\t\t\t_id: true,\n\t\t\t'voip.state': true\n\t\t}\n\t});\n});\n\nMeteor.methods({\n\tkiosk_log: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_log';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.log, { 'kiosk.handle': true });\n\t\tvar session = Sessions.collection.findOne({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: {\n\t\t\t\t$exists: true,\n\t\t\t\t$ne: 'complete'\n\t\t\t}\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\t_id: true\n\t\t\t}\n\t\t});\n\n\t\tif (!session) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\tKiosk.logs.insert({\n\t\t\tsessionId: message.data.session,\n\t\t\tkioskHandle: message.location.kiosk.handle,\n\t\t\tmessage: message.data.message\n\t\t});\n\t\t\t\n\t},\n\tkiosk_auth: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_auth';\n\t\tvalidateMessage(token, subject);\n\t\treturn true;\n\t},\n\t// Session closed due to inactivity\n\tkiosk_inactive: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_inactive';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.sessionId, { 'kiosk.handle': true });\n\n\t\tvar session = Sessions.collection.update({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstate: 'complete',\n\t\t\t\t'complete.condition': 'inactive'\n\t\t\t}\n\t\t});\n\n\t\tif (session === 0) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\t\n\t\treturn true;\n\t},\n\n\t// Create a new session\n\tkiosk_createSession: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_createSession';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.accessCode, { name: true, 'kiosk.code': true, 'kiosk.handle': true });\n\n\t\tif(message.data.code !== message.location.kiosk.code) {\n\t\t\tthrow new Meteor.Error('bad-code');\n\t\t}\n\n\t\t// TODO Deactivate all sessions for this kiosk\n\t\treturn Sessions.collection.insert({\n\t\t\tlocation: {\n\t\t\t\tid: message.location._id,\n\t\t\t\tname: message.location.name,\n\t\t\t\tkioskHandle: message.location.kiosk.handle\n\t\t\t},\n\t\t\tlang: message.data.lang,\n\t\t\tstate: 'form'\n\t\t});\n\t},\n\n\t// Submit patient form\n\tkiosk_createForm: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_createForm';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.createForm, { 'kiosk.trueVault.id': true, 'kiosk.handle': true});\n\t\tvar session = Sessions.collection.findOne({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: 'form'\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\t_id: true,\n\t\t\t\tlocation: true,\n\t\t\t\tstate: true\n\t\t\t}\n\t\t});\n\t\tconsole.log('server recieve create form ' + token);\n\t\tif(!session) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\tmessage.data.patient.sessionId = session._id;\n\n\t\tvar result = TrueVault.createDocument(message.data.patient, message.location.kiosk.trueVault.id);\n\n\t\t//if (result.data.result !== 'success') {\n\t\t//\tthrow new Meteor.Error('internal-error');\n\t\t//}\n\n\t\tsession['location.id'] = session.location.id;\n\t\tsession['location.kioskHandle'] = session.location.kioskHandle;\n\t\tdelete session.location;\n\t\tvar updated = Sessions.collection.update(session, {\n\t\t\t$set: {\n\t\t\t\tstate: 'voip',\n\t\t\t\t'voip.state': 'ready',\n\t\t\t\t'form.trueVaultRef.docId': result.docId,\n\t\t\t\t'form.trueVaultRef.vaultId': result.vaultId,\n\t\t\t\t'form.trueVaultRef.transId': result.transId\n\t\t\t},\n\t\t\t$push: {\n\t\t\t\t'voip.history': { state: 'ready' }\n\t\t\t}\n\t\t});\n\t\tif (updated === 0) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Get a voip token\n\tkiosk_voip_token: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_voip_token';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.sessionId, {'kiosk.handle': true});\n\t\tvar session = Sessions.collection.findOne({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: 'voip'\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\t_id: true\n\t\t\t}\n\t\t});\n\n\t\tif(!session) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\t\treturn SightCall.auth(message.location.kiosk.handle, 'standard').data.token;\n\t},\n\tkiosk_voip_fail: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_voip_fail';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.sessionId, {'kiosk.handle': true});\n\t\tvar session = Sessions.collection.update({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: 'voip'\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\t'voip.state': 'failed',\n\t\t\t},\n\t\t\t$push: {\n\t\t\t\t'voip.history': { state: 'failed' }\n\t\t\t}\n\t\t});\n\n\t\tif (session === 0) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\treturn true;\n\t},\n\tkiosk_voip_enqueue: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_voip_enqueue';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.sessionId, { 'kiosk.handle': true })\n\t\tvar session = Sessions.collection.update({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: 'voip',\n\t\t\t'voip.state': 'ready'\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\t'voip.state': 'queued',\n\t\t\t\t'voip.enqueuedAt': new Date\n\t\t\t},\n\t\t\t$push: {\n\t\t\t\t'voip.history': { state: 'queued' }\n\t\t\t}\n\t\t});\n\n\t\tif (session === 0) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tkiosk_recieve_reconnect_message: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_send_reconnect_message';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.log, { 'kiosk.handle': true });\n\t\tvar session = Sessions.collection.findOne({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: {\n\t\t\t\t$exists: true,\n\t\t\t\t$ne: 'complete'\n\t\t\t}\n\t\t}, {\n\t\t\tfields: {\n\t\t\t\t_id: true\n\t\t\t}\n\t\t});\n\n\t\tif (!session) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\tKiosk.logs.insert({\n\t\t\tsessionId: message.data.session,\n\t\t\tkioskHandle: message.location.kiosk.handle,\n\t\t\tmessage: message.data.message\n\t\t});\n\t},\n\n\tkiosk_voip_reenqueue: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_voip_reenqueue';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.sessionId, { 'kiosk.handle': true })\n\t\tvar session = Sessions.collection.update({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: 'voip',\n\t\t\t'voip.state': 'failed'\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\t'voip.state': 'queued'\n\t\t\t},\n\t\t\t$push: {\n\t\t\t\t'voip.history': { state: 'queued' }\n\t\t\t}\n\t\t});\n\n\t\tif (session === 0) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tkiosk_voip_finish: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_voip_finish';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.sessionId, { 'kiosk.handle': true });\n\t\tvar session = Sessions.collection.update({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: 'voip',\n\t\t\t'voip.state': 'assigned'\n\t\t}, {\n\t\t\t$set: {\n\t\t\t\tstate: 'survey',\n\t\t\t\t'voip.state': 'done'\n\t\t\t},\n\t\t\t$push: {\n\t\t\t\t'voip.history': { state: 'done' }\n\t\t\t}\n\t\t});\n\n\t\tif (session === 0) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\treturn true;\n\t},\n\n\tkiosk_createSurvey: function(token) {\n\t\tthis.unblock();\n\t\tcheck(token, String);\n\t\tvar subject = 'kiosk_createSurvey';\n\t\tvar message = validateMessage(token, subject, Kiosk.schemas.createSurvey, { 'kiosk.handle': true });\n\n\t\tvar update = {\n\t\t\t$set: {\n\t\t\t\tstate: 'complete',\n\t\t\t\t'complete.condition': 'finished'\n\t\t\t}\n\t\t};\n\n\t\tif(message.data.survey) {\n\t\t\tupdate.$set['survey.form'] = message.data.survey;\n\t\t} else {\n\t\t\tupdate.$set['survey.skipped'] = true;\n\t\t}\n\t\tvar session = Sessions.collection.update({\n\t\t\t_id: message.data.session,\n\t\t\t'location.id': message.location._id,\n\t\t\t'location.kioskHandle': message.location.kiosk.handle,\n\t\t\tstate: 'survey'\n\t\t}, update);\n\n\t\tif (session === 0) {\n\t\t\tthrow new Meteor.Error('bad-session');\n\t\t}\n\n\t\treturn true;\n\t}\n});\n"]}