{"version":3,"sources":["sfax/server/sfax.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,mC;;AAEA,U;;AAEA,2C;;AAEA,c;AACA,gB;AACA,c;AACA,qB;AACA,iB;AACA,E;;AAEA,kC;AACA,oE;AACA,8D;AACA,yG;AACA,gG;AACA,E;;AAEA,kC;AACA,uG;AACA,E;;AAEA,wC;AACA,4F;AACA,kE;AACA,0C;AACA,uB;AACA,E;;AAEA,2B;AACA,wC;AACA,E;;AAEA,4E;AACA,wB;AACA,qB;AACA,yD;AACA,0D;AACA,iE;AACA,+D;AACA,2E;AACA,qD;AACA,gE;AACA,iB;AACA,S;AACA,oB;AACA,a;AACA,4B;AACA,kC;AACA,I;AACA,G;AACA,G;AACA,Y;AACA,M;AACA,iF;AACA,c;AACA,6B;AACA,E;AACA,oB;AACA,E;;AAEA,sC;AACA,wB;AACA,gF;AACA,0D;AACA,Y;AACA,M;AACA,yB;AACA,c;AACA,mB;AACA,E;AACA,qC;AACA,E","file":"/packages/sfax.js","sourcesContent":["var crypto = Npm.require('crypto');\n\nSFax = {};\n\nvar endpoint = 'https://api.sfaxme.com/api'\n\nvar config = {\n\tusername: null,\n\tapiKey: null,\n\tencryptionKey: null,\n\tinitVector: null\n};\n\nSFax.config = function (options) {\n\tif (_.has(options, 'username')) config.username = options.username;\n\tif (_.has(options, 'apiKey')) config.apiKey = options.apiKey;\n\tif (_.has(options, 'encryptionKey')) config.encryptionKey = new Buffer(options.encryptionKey, 'binary');\n\tif (_.has(options, 'initVector')) config.initVector = new Buffer(options.initVector, 'binary');\n};\n\nvar createTokenData = function() {\n\treturn 'Username=' + config.username + '&ApiKey=' + config.apiKey + '&GenDT=' + moment.utc().format();\n};\n\nvar encryptToken = function(tokenData) {\n\tvar cipher = crypto.createCipheriv('aes-256-cbc', config.encryptionKey, config.initVector);\n\tvar encryptedToken = cipher.update(tokenData, 'ascii', 'base64');\n\tencryptedToken += cipher.final('base64');\n\treturn encryptedToken;\n};\n\nvar getToken = function() {\n\treturn encryptToken(createTokenData());\n};\n\nSFax.sendFax = function(sessionId, recipientName, recipientFax, pdfBuffer) {\n\tvar token = getToken();\n\tvar url = endpoint +\n\t         '/SendFax?token=' + encodeURIComponent(token) +\n\t         '&ApiKey=' + encodeURIComponent(config.apiKey) +\n\t         '&RecipientName=' + encodeURIComponent(recipientName) +\n\t         '&RecipientFax=' + encodeURIComponent(recipientFax) +\n\t         '&OptionalParams=TrackingCode=' + encodeURIComponent(sessionId) +\n\t         ';MaxAttempts=' + encodeURIComponent('6') +\n\t         ';AttemptInterval=' + encodeURIComponent('120') + '&';\n\tvar formData = {\n\t\tfile: {\n\t\t\tvalue: pdfBuffer,\n\t\t\toptions: {\n\t\t\t\tfilename: 'session.pdf',\n\t\t\t\tcontentType: 'application/pdf'\n\t\t\t}\n\t\t}\n\t};\n\tvar result;\n\ttry {\n\t\tresult = HTTP.call('POST', url, { npmRequestOptions: { formData: formData } });\n\t} catch (e) {\n\t\t//console.log('error: ',e);\n\t}\n\treturn result.data;\n};\n\nSFax.receiveOutboundFax = function() {\n\tvar token = getToken();\n\tvar url = endpoint + '/ReceiveOutboundFax?token=' + encodeURIComponent(token) +\n\t          '&ApiKey=' + encodeURIComponent(config.apiKey);\n\tvar result;\n\ttry {\n\t\tresult = HTTP.get(url);\n\t} catch (e) {\n\t\t//console.log(e);\n\t}\n\treturn result.data.OutboundFaxItems;\n};\n"]}